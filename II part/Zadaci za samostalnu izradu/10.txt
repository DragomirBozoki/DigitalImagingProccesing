#10.1
from skimage import io
import plotly.express as px


def rgb2gray(img):
  R = img[:,:,0]
  G = img[:,:,1]
  B = img[:,:,2]

  Y = 0.2125*R + 0.7154*G + 0.0721*B
  return Y


img = io.imread('lena_color.png')
px.imshow(img).show()
siva = rgb2gray(img)
px.imshow(siva, color_continuous_scale='gray').show()

#10.2
from skimage import io
import plotly.express as px
import numpy as np


def rgb2cmyk(img):
  img = img / 255
  R = img[:,:,0]
  G = img[:,:,1]
  B = img[:,:,2]

  K = np.zeros(R.shape)
  for row in range(R.shape[0]):
    for col in range(R.shape[1]):
      K[row, col] = 1 - max(R[row, col], G[row, col], B[row, col])
  #K = 1 - np.max(R, G, B)
  C = (1 - R - K) / (1 - K + np.finfo('float').eps)
  M = (1 - G - K) / (1 - K + np.finfo('float').eps)
  Y = (1 - B - K) / (1 - K + np.finfo('float').eps)

  cmyk = np.stack((C,M,Y,K),axis=2)
  return cmyk

def cmyk2rgb(img):
  C = img[:,:,0]
  M = img[:,:,1]
  Y = img[:,:,2]
  K = img[:,:,3]

  R = 255 * (1 - C) * (1 - K)
  G = 255 * (1 - M) * (1 - K)
  B = 255 * (1 - Y) * (1 - K)

  rgb = np.stack((R,G,B),axis=2)
  return rgb


img1 = io.imread('baboon.bmp')
px.imshow(img1).show()
img2 = img1.copy()
img2 = rgb2cmyk(img2)
# px.imshow(img2).show()
img3 = img2.copy()

C = img3[:,:,0]
M = img3[:,:,1]
Y = img3[:,:,2]

C = C * 0.7 + 0.3
M = M * 0.7 + 0.3
Y = Y * 0.7 + 0.3

img4 = np.stack((C,M,Y, img3[:,:,3]),axis=2)

img3 = cmyk2rgb(img4)
px.imshow(img3).show()

#10.3
from skimage import io
import plotly.express as px

img = io.imread('flower.jpg')
px.imshow(img).show()

R = img[:,:,0].astype('float')
G = img[:,:,1].astype('float')
B = img[:,:,2].astype('float')

m = np.sqrt((240-R)**2 + (150-G)**2 + (5-B)**2) <= 60

px.imshow(M, color_continuous_scale='gray').show()

img_masked = img * np.stack((m,m,m),axis=2)
fig = px.imshow(img_masked)
fig.show()

#10.4
import plotly.express as px
from skimage import io
from skimage import color

img = io.imread('baboon.bmp')
fig = px.imshow(img)
fig.show()

img2 = img.copy()
img_hsv = color.rgb2hsv(img2)

H = img_hsv[:,:,0]
S = img_hsv[:,:,1]
# fig = px.imshow(H, color_continuous_scale='gray')
# fig.show()
# fig = px.imshow(S, color_continuous_scale='gray')
# fig.show()

mr_h = ((0 <= H) & (H < 0.1)) | ((0.85 <= H) & (H <= 1))
mr_s = (0.8 <= S)
m = mr_h * mr_s
fig = px.imshow(mr, color_continuous_scale='gray')
fig.show()

img_masked = img * np.stack((m,m,m),axis=2)
fig = px.imshow(img_masked)
fig.show()

#10.5
import plotly.express as px
from skimage import io
from skimage import color

img = io.imread('color_mix.bmp').astype('float')
fig = px.imshow(img)
fig.show()

img2 = img.copy()
img_hsv = color.rgb2hsv(img2)

# px.imshow(img_hsv[:,:,0], color_continuous_scale='gray').show()
# px.imshow(img_hsv[:,:,1], color_continuous_scale='gray').show()
# px.imshow(img_hsv[:,:,2], color_continuous_scale='gray').show()

H = img_hsv[:,:,0]
S = img_hsv[:,:,1]
V = img_hsv[:,:,2]

mb2y = (H == 2/3) * S * (-1/2)
# px.imshow(mb2y, color_continuous_scale='gray').show()
H += mb2y
mr2b = (H == 0) * S * 2/3
# px.imshow(mr2b, color_continuous_scale='gray').show()
H += mr2b
mb2w = (H == 0) * (S == 0) * (V == 0)
# px.imshow(mb2w, color_continuous_scale='gray').show()
V += mb2w
mg = (H == 1/3) * S * (-1/2)
# px.imshow(mg, color_continuous_scale='gray').show()
S += mg

img3 = color.hsv2rgb(img_hsv)
fig = px.imshow(img3)
fig.show()

#10.6
from skimage import io
import numpy as np
import plotly.express as px
from scipy import ndimage
from skimage import color

img = io.imread('peppers_matlab.png')
img2 = img.copy()
px.imshow(img).show()

G = img2[:, :, 1]

rng = np.random.default_rng()
p = rng.uniform(size=G.shape)

G[p < 0.05] = 0
G[(p >= 0.05) & (p < 0.1)] = 255
px.imshow(img2).show()

img3 = img2.copy()
img3[:, :, 1] = ndimage.median_filter(img3[:, :, 1], size=(3, 3))
px.imshow(img3).show()

#Samo da pokaze da se sum koji je u RGB samo na G kanalu u HSV prelazi u sva tri kanala
hsv_image = color.rgb2hsv(img2)
px.imshow(hsv_image[:,:,0], color_continuous_scale='gray').show()
px.imshow(hsv_image[:,:,1], color_continuous_scale='gray').show()
px.imshow(hsv_image[:,:,2], color_continuous_scale='gray').show()